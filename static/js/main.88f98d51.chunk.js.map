{"version":3,"sources":["components/AddItem.jsx","components/ToDoListItem.jsx","components/ToDoList.jsx","store/mainState.js","App.js","serviceWorker.js","index.js"],"names":["AddItem","props","className","placeholder","type","onChange","e","updateInputText","target","value","inputText","onClick","addItem","ToDoListItem","itemPrep","isDone","text","changeItemStatus","id","checked","deleteItem","ToDoList","items","toDoListItems","length","map","item","key","mainState","App","state","activeItemsCount","filter","bind","itemId","this","setState","prevState","changedItemsArr","countArr","newItemsArr","unshift","Math","round","random","newItemsArr2","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88f98d51.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// it`s add item form\r\nlet AddItem = (props) => {\r\n    return (\r\n        <div className=\"app_addItem\">\r\n            <div className=\"app_addItem_input\">\r\n                <span className=\"wordTask\">Task</span>\r\n                <input className=\"input\" placeholder=\"What do you need to do ?\" type=\"text\"  onChange={(e) => props.updateInputText(e.target.value)} value={props.inputText} />\r\n            </div>\r\n            <div className=\"app_addItem_btn\">\r\n                <button onClick={() => props.addItem()}>Save item</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddItem;\r\n","import React from 'react';\r\n\r\n\r\nlet ToDoListItem = (props) => {\r\n\r\n    return (\r\n        <div className=\"app_toDoItems_toDoItem\">\r\n            <div className={`itemText ${props.itemPrep.isDone ? 'itemText_Done' : 'itemText_Nondone'}`}>\r\n                {props.itemPrep.text}\r\n            </div>\r\n            <div className=\"toDoButtons\">\r\n                <button className=\"item_check_btn\" onClick={() => props.changeItemStatus(props.itemPrep.id)} checked={props.itemPrep.isDone}></button>\r\n                <button className=\"item_delete_btn\" onClick={() => { props.deleteItem(props.itemPrep.id) }}></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoListItem;\r\n","import React from 'react';\r\nimport ToDoListItem from './ToDoListItem';\r\n\r\nlet ToDoList = (props) => {\r\n    let items = props.toDoListItems.length === 0 ? \r\n    'You have no items' : \r\n    props.toDoListItems.map((item) => <ToDoListItem key={item.id} itemPrep={item} changeItemStatus={props.changeItemStatus} deleteItem={props.deleteItem}/>)\r\n\r\n    return (\r\n      <div className=\"app_toDoItems\">\r\n        {items}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList;\r\n","// model of state\r\nlet mainState = [\r\n    { id: 1, text: 'Make a cake', isDone: false },\r\n    { id: 2, text: 'Prepare a presentation', isDone: false },\r\n    { id: 3, text: 'Walk the dog', isDone: false },\r\n    { id: 4, text: 'Study the poem', isDone: true },\r\n    { id: 5, text: 'Go to the gym', isDone: false }\r\n];\r\n\r\n\r\nexport default mainState;","import React from 'react';\r\nimport './App.css';\r\nimport AddItem from './components/AddItem';\r\nimport ToDoList from './components/ToDoList';\r\n\r\nimport mainState from './store/mainState';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      toDoListItems: mainState,\r\n      inputText: '',\r\n      activeItemsCount: mainState.filter((item) => (item.isDone === false ? item : null)).length,\r\n    };\r\n\r\n    this.changeItemStatus = this.changeItemStatus.bind(this);\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.updateInputText = this.updateInputText.bind(this);\r\n  }\r\n\r\n  // change item status method\r\n  changeItemStatus(itemId) {\r\n    this.setState((prevState) => {\r\n      const changedItemsArr = prevState.toDoListItems.map((item) => {\r\n        if (item.id === itemId) {\r\n          return {\r\n            ...item,\r\n            isDone: !item.isDone,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      let countArr = changedItemsArr.filter((item) => (item.isDone === false ? item : null));\r\n      return {\r\n        toDoListItems: changedItemsArr,\r\n        activeItemsCount: countArr.length,\r\n      };\r\n    });\r\n  }\r\n\r\n  // update input text with input\r\n  // input.inputText contain current input text\r\n  updateInputText(inputText) {\r\n    this.setState({ inputText: inputText });\r\n  }\r\n\r\n  // add item method\r\n  addItem() {\r\n    this.setState((prevState) => {\r\n      const newItemsArr = [...prevState.toDoListItems];\r\n\r\n      newItemsArr.unshift({\r\n        id: Math.round(Math.random() * 10000),\r\n        text: this.state.inputText,\r\n        isDone: false,\r\n      });\r\n\r\n      let countArr = newItemsArr.filter((item) => (item.isDone === false ? item : null)).length;\r\n\r\n      return {\r\n        toDoListItems: newItemsArr,\r\n        activeItemsCount: countArr,\r\n        inputText: '',\r\n      };\r\n    });\r\n  }\r\n\r\n  // delete item method\r\n  deleteItem(itemId) {\r\n    this.setState((prevState) => {\r\n      const newItemsArr2 = prevState.toDoListItems.filter((item) => {\r\n        if (item.id !== itemId) {\r\n          return { ...item };\r\n        } else {\r\n          return null;\r\n        }\r\n      });\r\n      let countArr = newItemsArr2.filter((item) => (item.isDone === false ? item : null));\r\n      return {\r\n        toDoListItems: newItemsArr2,\r\n        activeItemsCount: countArr.length,\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2 className=\"headerTitle\">To do:</h2>\r\n        <span className=\"activeItem\">Active items: {this.state.activeItemsCount}</span>\r\n        <ToDoList\r\n          changeItemStatus={this.changeItemStatus}\r\n          toDoListItems={this.state.toDoListItems}\r\n          deleteItem={this.deleteItem}\r\n        />\r\n        <AddItem\r\n          inputText={this.state.inputText}\r\n          addItem={this.addItem}\r\n          updateInputText={this.updateInputText}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n     <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}